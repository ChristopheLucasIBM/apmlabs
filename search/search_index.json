{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"[Page last updated on 08 December 2020] IBM Maximo Asset Performance Management (APM) Labs Welcome to these labs which will take you step by step through an exciting story using the IBM Maximo Asset Performance Management (APM) solution. What is Asset Performance Management (APM) ? Asset Performance Management (APM) and Enterprise Asset Management (EAM) are complementary programs. But whereas EAM enables the execution of the day to day asset maintenance activities like work scheduling, planning and work order tracking, APM is designed for decision support , i.e. APM uses advanced analytics and AI to help operations, maintenance leaders, reliability engineers and technicians make better decisions around their assets' lifecycle. By enabling ... operations people to have an enterprise wide view of their fleets of assets and detect anomalies in near real-time, reliability and maintenance professionals to track the real condition and health of assets and predict their failures, technicians to more quickly maintain or fix assets by providing them AI-based problem diagnosis and expert guidance ... a sound use of an end-to-end APM solution can help: reduce unplanned downtime, shorten duration of outages, increase production output or decrease wasted time investigating false-positive alerts, reduce fleetwide operational risk by focusing on the right assets, increase asset availability, reduce unnecessary preventive maintenance, reduce time to make capital replacement planning decisions improve first time fix rate, reduce MTTR (mean time to repair), improve diagnosis accuracy and cut diagnosis time, standardize maintenance and repair processes reduce failures, reduce maintenance costs, improve asset utilisation, extended life of asset, and ultimately, enable a shift of maintenance strategies from a calendar or preventive base to a real condition, then predictive and prescriptive base. IBM Maximo APM is a fully integrated set of tools which is part of a yet broader ecosystem of IBM solutions which will help you accelerate 'Asset Optimisation' efforts. Those APM elements are: MANAGE : bh MONITOR : mk HEALTH : cdc PREDICT : cdc The APM tools/elements that we will extensively use in the first version (December 2020) of these labs are MANAGE, MONITOR and HEALTH, which main capabilities are summarized below: This picture summarises the main elements of APM and how they are integrated. APM Labs Overview Audience: IBM demo'er Business Partner Everyone Intended Audience & Goals These labs Principles, Limitations & Tips Principles: Fully data driven bh Any Asset ! Customn Right-click images Red dots in images Point to more e.g. Carlos GOLDEN NUGGET GOALS: TIPS: might not be exact same screen Prerequisites & Tools Versions","title":"GET STARTED"},{"location":"#ibm-maximo-asset-performance-management-apm-labs","text":"Welcome to these labs which will take you step by step through an exciting story using the IBM Maximo Asset Performance Management (APM) solution.","title":"IBM Maximo Asset Performance Management (APM) Labs"},{"location":"#what-is-asset-performance-management-apm","text":"Asset Performance Management (APM) and Enterprise Asset Management (EAM) are complementary programs. But whereas EAM enables the execution of the day to day asset maintenance activities like work scheduling, planning and work order tracking, APM is designed for decision support , i.e. APM uses advanced analytics and AI to help operations, maintenance leaders, reliability engineers and technicians make better decisions around their assets' lifecycle. By enabling ... operations people to have an enterprise wide view of their fleets of assets and detect anomalies in near real-time, reliability and maintenance professionals to track the real condition and health of assets and predict their failures, technicians to more quickly maintain or fix assets by providing them AI-based problem diagnosis and expert guidance ... a sound use of an end-to-end APM solution can help: reduce unplanned downtime, shorten duration of outages, increase production output or decrease wasted time investigating false-positive alerts, reduce fleetwide operational risk by focusing on the right assets, increase asset availability, reduce unnecessary preventive maintenance, reduce time to make capital replacement planning decisions improve first time fix rate, reduce MTTR (mean time to repair), improve diagnosis accuracy and cut diagnosis time, standardize maintenance and repair processes reduce failures, reduce maintenance costs, improve asset utilisation, extended life of asset, and ultimately, enable a shift of maintenance strategies from a calendar or preventive base to a real condition, then predictive and prescriptive base. IBM Maximo APM is a fully integrated set of tools which is part of a yet broader ecosystem of IBM solutions which will help you accelerate 'Asset Optimisation' efforts. Those APM elements are: MANAGE : bh MONITOR : mk HEALTH : cdc PREDICT : cdc The APM tools/elements that we will extensively use in the first version (December 2020) of these labs are MANAGE, MONITOR and HEALTH, which main capabilities are summarized below: This picture summarises the main elements of APM and how they are integrated.","title":"What is Asset Performance Management (APM) ?"},{"location":"#apm-labs-overview","text":"Audience: IBM demo'er Business Partner Everyone","title":"APM Labs Overview"},{"location":"#intended-audience-goals","text":"","title":"Intended Audience &amp; Goals"},{"location":"#these-labs","text":"","title":"These labs"},{"location":"#principles-limitations-tips","text":"Principles: Fully data driven bh Any Asset ! Customn Right-click images Red dots in images Point to more e.g. Carlos GOLDEN NUGGET GOALS: TIPS: might not be exact same screen","title":"Principles, Limitations &amp; Tips"},{"location":"#prerequisites-tools-versions","text":"","title":"Prerequisites &amp; Tools Versions"},{"location":"about/about/","text":"About the Author & Your Feedback Christophe Lucas is a fan of Miles Davis who loves playing with words, images and micro structural sounds. As a pass-time, some times, he likes to rewrite the history of the hellenistic world, and some other times, just for a change, he creates APM lab material like the one you just bravely went through. Christophe can certify that none of this APM lab material would have been possible without the fantastic work of countless people before him. Unable to thank everybody, he nevertheless wants to send a big Thanks to these few for all their inspiration and support: Carlos Ferreira , Paulina Thomas , Graeme Pexton , Heena Purohit , Lynn Sweetwood , Pamela Watkins , Steve Kominiarek , and, of course, Thomas Konrad and David Small . You can contact Christophe to provide feedback or report any issue with this material via LinkedIn here .","title":"(About & Feedback)"},{"location":"about/about/#about-the-author-your-feedback","text":"Christophe Lucas is a fan of Miles Davis who loves playing with words, images and micro structural sounds. As a pass-time, some times, he likes to rewrite the history of the hellenistic world, and some other times, just for a change, he creates APM lab material like the one you just bravely went through. Christophe can certify that none of this APM lab material would have been possible without the fantastic work of countless people before him. Unable to thank everybody, he nevertheless wants to send a big Thanks to these few for all their inspiration and support: Carlos Ferreira , Paulina Thomas , Graeme Pexton , Heena Purohit , Lynn Sweetwood , Pamela Watkins , Steve Kominiarek , and, of course, Thomas Konrad and David Small . You can contact Christophe to provide feedback or report any issue with this material via LinkedIn here .","title":"About the Author &amp; Your Feedback"},{"location":"health/health/","text":"[Page last updated on 08 December 2020] HEALTH Lab 0. Objectives In this Module you will: * bhcdcdcdcd 1. Setup Assets, Meters & Condition Monitoring in Maximo 1. Create 3 Assets & 1 Query in Maximo In Maximo, click the Go To Applications - Asset Menu. Click the + button to create an Asset, enter CL_Asset_1 in both the Asset ID & Description fields. Click Save . Repeat this step for CL_Asset_2 and CL_Asset_3 . Click the List View menu. In the Asset field, enter CL_Asset* , click enter. This should return the list of your 3 just-created CL_Assets . Click the Save Query button, enter CL_Assets in in both the Query Name & Description . Tick the Public box. 2. Create a Meter Group In this section, we will create a maximo Meter Group containing 8 Meters that we will later associate to the IoT readings that we defined in the first section of the MONITOR lab. In Maximo to-left Find Navigation Item box, enter the Meter Groups application. Click the + button to create a Meter Group, enter CL_Asset in both the Meter Group & Description fields. Click New Row and in the Meter field, click Select Value . In the Select Value window that opens, enter Temp in the Meter field, hit Enter, select TEMP-C . Repeat previous step with the following Meters : VIBRATIONH , PRESSURE , SPEED , ACCELERAT , LOAD , TORQUE , STARTS . Click the Save button. Note that, although Meters like PRESSURE often exist in Maximo installations out-of-the-box, some of the Meters appearing in step 4. might not exist in Maximo yet. In which case, do the following: (a) Go to the Meters menu via Find Navigation Item , (b) click Create new Meter, enter e.g. ACCELERAT (the maximum name length is 9 ), select GAUGE as Meter Type , then Save . That newly created Meter can now be added to the Meter Group in step 4. 3. Associate Meter Group to Assets & create Meter Readings In Maximo, click the Go To Applications - Asset Menu. In the Asset field, enter CL_Asset* , click enter. This will return the list of you 3 CL_Assets , click CL_Asset_1 . Go to On CL_Asset_1 , go to its Meters tab, click Meter Group - Select Value . In the Select Value window, CL_Asset* , click enter, select the CL_Asset Meter Group. Click Save . This has loaded all the Meters we defined in the Meter Group . In left Find Navigation item box, enter Enter M , click Enter Meter Readings . For each Meter, enter values within the ranges that we defined for the IoT readings at the beginning of the Monitor lab in 2. Create IoT Simulation . For example: TEMP-C = 37 , VIBRATIONH = 4 , PRESSURE = 22 , SPEED = 17 , ACCELERAT = 9 , LOAD = 100 , TORQUE = 12 , STARTS = 1 . Click OK . Repeat steps 1. to 3. for CL_Asset_2 and CL_Asset_3 with whatever Meter values you want. 4. Create a Condition Monitoring Rule We are now going to create a Condition Monitoring rule. The ultimate idea here is that we will create upper and lower limits for the Meter Readings which, when passed, can automatically trigger work orders. Because we will later tie our original IoT readings from the Watson IoT Platform to Meter readings in Maximo , this will literally allow us to move towards a real Condition Based maintenance regime ! In this exercise, we will create such a rule for just 1 Asset ( CL_Asset_1 ) and 1 reading ( TEMP-C ), but you can of course create more rules for other Assets and/or other readings. In Maximo, click the Go To Applications - Condition Monitoring Menu. Click the + to create a new Condition Monitoring. Name it CL_Asset . In the Point and Description fields, enter CL_Asset* . Next to the Asset field, click Select Value , search for CL_Asset_1 , select it. Next to the Meter field, click Select Value , search for TEMP-C , select it. In the Upper Warning Limit field, enter 40 , in the Lower Warning Limit field, enter 35 . In the Upper Action Limit field, enter 45 , in the Lower Action Limit field, enter 30 . Note that those values roughly correspond to the \"temperature\": random(35,40), values we originally defined in our IoT Simulation. With those limits defined, Condition Monitoring should pick-up those anomalous \"temperature\": random(46,48), we generated ! In the Upper Limit Job Pan field, click Select Value and select whatever existing Job Plan you want (we're just doing a demo here !). Do the same for Upper Limit Job Pan . Click Save . Your final screen should look like picture below. 2. Map IoT Devices & Readings to Maximo Assets & Meters 1. Register IoT Device Type as an Asset [As earlier mentioned, this step assumes that the integration between the Watson IoT Platform and Maximo Reliability Engineer work centre exists. If not, here are the Integration Setup Instructions ] . In the left Find Navigation item box, enter Rel , click Reliability Engineer . This will open the Reliability Engineer work centre. In the left menu, click Integration . Click Next 3 times through the Select IoT Service then Configure IoT Service then Configure End Points then Register Device Types . On the Register Device Types page, select CL_Asset , click Register as Asset then Next . This will take you to the Map Data Schema page. 2. Map IoT Readings to Maximo Meters On the first Schema tab of the Map Data Schema page, tick Detect from a connected device and From first available then click Get now . If your IoT Simulation is still running, this will return a .json string similar to this: {\"acceleration\":10,\"load\":99,\"temperature\":39,\"torque\":14,\"pressure\":22,\"vibration\":2,\"starts\":86,\"speed\":19} . If that string is not returned (because e.g. your IoT Simulation is not running at this time), you can manually enter this value in the field. Click Save then switch to the Device Type Mappings tab . Click Add Mapping , then Select Meter . Find and select TEMP-C - that's the Maximo Meter . On the IoT Device Type Property , select temperature - that's the IoT Reading . In the Data Collection section, tick Aggregated with Value = AVG and Time Period = Hour . This means that once every hour, a Meter reading will be created with a value equal to the average of your IoT Readings for the past hour. Repeat steps 2. to 3. for the other readings, i.e. VIBRATIONH , PRESSURE , SPEED , ACCELERAT , LOAD , TORQUE . For STARTS , select COUNT instead of AVG . 3. Associate IoT Devices to Maximo Assets Move to the Associate Devices top-menu. On the first Associate Assets tab, filter on CL_Asset . This will display 1 row for each Asset and Meter , i.e. 8 rows per Asset. On all CL_Asset_1 rows, click the Device Type column, select CL_Asset , then on the next column, select CL_Asset_1 . Repeat step 1. for all other rows corresponding to CL_Asset_2 and CL_Asset_3 . Do not forget to click Save . Once that is done, those 24 rows will have moved to the Manage Assets . 3. Create Scoring Method and Dashboard 1. Create required Scoring Factors Note that in most Maximo installations, some of the Meters like e.g. TEMP-C might already be defined as Scoring Factors . However, the Meters that we defined in 2. Create a Meter Group do not exist as Scoring Factors yet and we will define them in this. We will just use the sample of the Torque Meter here. Go to the left Scoring menu. Click on the Scoring Factors . Check which ones of the 8 Meters we defined already exist here. For each one which does not exist, click Create Factor . In the page that opens, click Select Meter , and search for e.g. Torque and click. Enter Torque in Factor Name . In the High Threshold , enter 15 , and in the Low Threshold , enter 10 . These threshold values are close to the range of the readings we defined for the associated IoT Reading in our initial IoT Simulation. Tick the Use Condition Monitoring ? box and click Save . Repeat this steps for all other Meters which do exist as a Scoring Factor yet. 2. Create Scoring Method In the Health part of APM, we want to provide reliability engineers and maintenance professionals with a near real-time visibility of the health of their Assets. The health of an Asset is defined by a configurable Health Score . In this exercise, we will define a Scoring Method for the 3 CL_Assets we created. A Scoring Method is defined by a 100% mix of 1 or n Drivers , each Driver being made of 1 or n Scoring Factors , each Scoring Factor corresponding to a Meter Reading value, and each Driver having a Weight expressed in %. Click the Scoring Methods tab and click the top-right Create Method . Tick the Multiple Drivers box and Next . In the Method ID and Description fields, write CL_Asset , click Next . In the Select Query field, search and click our earlier created CL_Asset query - you will see our 3 CL_Assets appear, click Next . In the Best Score enter 100 , in the Worst Score enter 0 . Click Save . Let's now build this CL_Asset Scoring Method: cd","title":"HEALTH"},{"location":"health/health/#health-lab","text":"","title":"HEALTH Lab"},{"location":"health/health/#0-objectives","text":"In this Module you will: * bhcdcdcdcd","title":"0. Objectives"},{"location":"health/health/#1-setup-assets-meters-condition-monitoring-in-maximo","text":"","title":"1. Setup Assets, Meters &amp; Condition Monitoring in Maximo"},{"location":"health/health/#1-create-3-assets-1-query-in-maximo","text":"In Maximo, click the Go To Applications - Asset Menu. Click the + button to create an Asset, enter CL_Asset_1 in both the Asset ID & Description fields. Click Save . Repeat this step for CL_Asset_2 and CL_Asset_3 . Click the List View menu. In the Asset field, enter CL_Asset* , click enter. This should return the list of your 3 just-created CL_Assets . Click the Save Query button, enter CL_Assets in in both the Query Name & Description . Tick the Public box.","title":"1. Create 3 Assets &amp; 1 Query in Maximo"},{"location":"health/health/#2-create-a-meter-group","text":"In this section, we will create a maximo Meter Group containing 8 Meters that we will later associate to the IoT readings that we defined in the first section of the MONITOR lab. In Maximo to-left Find Navigation Item box, enter the Meter Groups application. Click the + button to create a Meter Group, enter CL_Asset in both the Meter Group & Description fields. Click New Row and in the Meter field, click Select Value . In the Select Value window that opens, enter Temp in the Meter field, hit Enter, select TEMP-C . Repeat previous step with the following Meters : VIBRATIONH , PRESSURE , SPEED , ACCELERAT , LOAD , TORQUE , STARTS . Click the Save button. Note that, although Meters like PRESSURE often exist in Maximo installations out-of-the-box, some of the Meters appearing in step 4. might not exist in Maximo yet. In which case, do the following: (a) Go to the Meters menu via Find Navigation Item , (b) click Create new Meter, enter e.g. ACCELERAT (the maximum name length is 9 ), select GAUGE as Meter Type , then Save . That newly created Meter can now be added to the Meter Group in step 4.","title":"2. Create a Meter Group"},{"location":"health/health/#3-associate-meter-group-to-assets-create-meter-readings","text":"In Maximo, click the Go To Applications - Asset Menu. In the Asset field, enter CL_Asset* , click enter. This will return the list of you 3 CL_Assets , click CL_Asset_1 . Go to On CL_Asset_1 , go to its Meters tab, click Meter Group - Select Value . In the Select Value window, CL_Asset* , click enter, select the CL_Asset Meter Group. Click Save . This has loaded all the Meters we defined in the Meter Group . In left Find Navigation item box, enter Enter M , click Enter Meter Readings . For each Meter, enter values within the ranges that we defined for the IoT readings at the beginning of the Monitor lab in 2. Create IoT Simulation . For example: TEMP-C = 37 , VIBRATIONH = 4 , PRESSURE = 22 , SPEED = 17 , ACCELERAT = 9 , LOAD = 100 , TORQUE = 12 , STARTS = 1 . Click OK . Repeat steps 1. to 3. for CL_Asset_2 and CL_Asset_3 with whatever Meter values you want.","title":"3. Associate Meter Group to Assets &amp; create Meter Readings"},{"location":"health/health/#4-create-a-condition-monitoring-rule","text":"We are now going to create a Condition Monitoring rule. The ultimate idea here is that we will create upper and lower limits for the Meter Readings which, when passed, can automatically trigger work orders. Because we will later tie our original IoT readings from the Watson IoT Platform to Meter readings in Maximo , this will literally allow us to move towards a real Condition Based maintenance regime ! In this exercise, we will create such a rule for just 1 Asset ( CL_Asset_1 ) and 1 reading ( TEMP-C ), but you can of course create more rules for other Assets and/or other readings. In Maximo, click the Go To Applications - Condition Monitoring Menu. Click the + to create a new Condition Monitoring. Name it CL_Asset . In the Point and Description fields, enter CL_Asset* . Next to the Asset field, click Select Value , search for CL_Asset_1 , select it. Next to the Meter field, click Select Value , search for TEMP-C , select it. In the Upper Warning Limit field, enter 40 , in the Lower Warning Limit field, enter 35 . In the Upper Action Limit field, enter 45 , in the Lower Action Limit field, enter 30 . Note that those values roughly correspond to the \"temperature\": random(35,40), values we originally defined in our IoT Simulation. With those limits defined, Condition Monitoring should pick-up those anomalous \"temperature\": random(46,48), we generated ! In the Upper Limit Job Pan field, click Select Value and select whatever existing Job Plan you want (we're just doing a demo here !). Do the same for Upper Limit Job Pan . Click Save . Your final screen should look like picture below.","title":"4. Create a Condition Monitoring Rule"},{"location":"health/health/#2-map-iot-devices-readings-to-maximo-assets-meters","text":"","title":"2. Map IoT Devices &amp; Readings to Maximo Assets &amp; Meters"},{"location":"health/health/#1-register-iot-device-type-as-an-asset","text":"[As earlier mentioned, this step assumes that the integration between the Watson IoT Platform and Maximo Reliability Engineer work centre exists. If not, here are the Integration Setup Instructions ] . In the left Find Navigation item box, enter Rel , click Reliability Engineer . This will open the Reliability Engineer work centre. In the left menu, click Integration . Click Next 3 times through the Select IoT Service then Configure IoT Service then Configure End Points then Register Device Types . On the Register Device Types page, select CL_Asset , click Register as Asset then Next . This will take you to the Map Data Schema page.","title":"1. Register IoT Device Type as an Asset"},{"location":"health/health/#2-map-iot-readings-to-maximo-meters","text":"On the first Schema tab of the Map Data Schema page, tick Detect from a connected device and From first available then click Get now . If your IoT Simulation is still running, this will return a .json string similar to this: {\"acceleration\":10,\"load\":99,\"temperature\":39,\"torque\":14,\"pressure\":22,\"vibration\":2,\"starts\":86,\"speed\":19} . If that string is not returned (because e.g. your IoT Simulation is not running at this time), you can manually enter this value in the field. Click Save then switch to the Device Type Mappings tab . Click Add Mapping , then Select Meter . Find and select TEMP-C - that's the Maximo Meter . On the IoT Device Type Property , select temperature - that's the IoT Reading . In the Data Collection section, tick Aggregated with Value = AVG and Time Period = Hour . This means that once every hour, a Meter reading will be created with a value equal to the average of your IoT Readings for the past hour. Repeat steps 2. to 3. for the other readings, i.e. VIBRATIONH , PRESSURE , SPEED , ACCELERAT , LOAD , TORQUE . For STARTS , select COUNT instead of AVG .","title":"2. Map IoT Readings to Maximo Meters"},{"location":"health/health/#3-associate-iot-devices-to-maximo-assets","text":"Move to the Associate Devices top-menu. On the first Associate Assets tab, filter on CL_Asset . This will display 1 row for each Asset and Meter , i.e. 8 rows per Asset. On all CL_Asset_1 rows, click the Device Type column, select CL_Asset , then on the next column, select CL_Asset_1 . Repeat step 1. for all other rows corresponding to CL_Asset_2 and CL_Asset_3 . Do not forget to click Save . Once that is done, those 24 rows will have moved to the Manage Assets .","title":"3. Associate IoT Devices to Maximo Assets"},{"location":"health/health/#3-create-scoring-method-and-dashboard","text":"","title":"3. Create Scoring Method and Dashboard"},{"location":"health/health/#1-create-required-scoring-factors","text":"Note that in most Maximo installations, some of the Meters like e.g. TEMP-C might already be defined as Scoring Factors . However, the Meters that we defined in 2. Create a Meter Group do not exist as Scoring Factors yet and we will define them in this. We will just use the sample of the Torque Meter here. Go to the left Scoring menu. Click on the Scoring Factors . Check which ones of the 8 Meters we defined already exist here. For each one which does not exist, click Create Factor . In the page that opens, click Select Meter , and search for e.g. Torque and click. Enter Torque in Factor Name . In the High Threshold , enter 15 , and in the Low Threshold , enter 10 . These threshold values are close to the range of the readings we defined for the associated IoT Reading in our initial IoT Simulation. Tick the Use Condition Monitoring ? box and click Save . Repeat this steps for all other Meters which do exist as a Scoring Factor yet.","title":"1. Create required Scoring Factors"},{"location":"health/health/#2-create-scoring-method","text":"In the Health part of APM, we want to provide reliability engineers and maintenance professionals with a near real-time visibility of the health of their Assets. The health of an Asset is defined by a configurable Health Score . In this exercise, we will define a Scoring Method for the 3 CL_Assets we created. A Scoring Method is defined by a 100% mix of 1 or n Drivers , each Driver being made of 1 or n Scoring Factors , each Scoring Factor corresponding to a Meter Reading value, and each Driver having a Weight expressed in %. Click the Scoring Methods tab and click the top-right Create Method . Tick the Multiple Drivers box and Next . In the Method ID and Description fields, write CL_Asset , click Next . In the Select Query field, search and click our earlier created CL_Asset query - you will see our 3 CL_Assets appear, click Next . In the Best Score enter 100 , in the Worst Score enter 0 . Click Save . Let's now build this CL_Asset Scoring Method: cd","title":"2. Create Scoring Method"},{"location":"monitor/monitor/","text":"[Page last updated on 08 December 2020] MONITOR Lab Before you begin: 0. Objectives In this Module you will: Create a Device Type and 3 Devices of that Type Generate IoT data for those 3 Devices using an IoT simulation Create Physical & Logical interfaces to send the IoT data to the Monitor data lake Visualise the IoT data in a Watson IoT Platform simple dashboard 1. Generate IoT data 1. Create Device Type & 3 Devices Let's first create a Device Type . From your Monitor Instance Home page, click Connect Devices On the opened Connect menu, click Open Platform Service application in the top-right corner. This will launch the associated Watson IoT Platform in a separate browser tab. Go to the Device Types menu, and click Add Device Type . Enter XY_Asset in the Name and Description fields - where XY are your initials. Note that for the rest of this lab, we will use CL_Asset (e.g. CL for Christophe Lucas). Click Next . On the next Metadata page, enter CL in Model and Manufacturer fields, and enter CL_Asset in Device Class field. The reason why we want to enter values here is to later show how Dimensions can be used in Monitor to slide and dice the data. Click Finish . The below picture shows the 5 previous steps. Now, let's create 3 Devices of type CL_Asset . Stay in the Watson IoT Platform , go to the Browse menu and click Add Device . On the identity page, select your just created CL_Asset as Entity Type and enter CL_Asset_1 in Device ID . Click Next . On the Device Information page, accept the defaults, click Next . On the Security page, accept the defaults, click Next . On the Security page, accept the defaults, click Next . Click Back , and repeat above steps 1 to 5 for 2 more Assets: CL_Asset_2 and CL_Asset_3 . Finally, go to the Browse menu, enter CL_Asset in the Search field, and you will now see your 3 Devices. You have now created the required CL_Asset Device Type and the 3 CL_Asset_1 , CL_Asset_2 and CL_Asset_3 Devices that we will use throughout the labs. The below pictures shows the 7 previous steps. 2. Create IoT Simulation Let's now send data to those 3 Devices ! Using the Watson IoT Platform IoT Simulation capabilities, it is possible to simulate a device and its IoT readings - exactly as if this was a real IoT device really connected to the platform and sending real IoT readings. We are going to use this great functionality as it allows one to literally simulate any asset (e.g. Pump, Engine, Truck, Conveyor Belt - you name it !), any IoT readings and do any demo. For this Lab, we will simulate our 3 CL_Asset_1_2_3 Devices generating the following IoT readings: temperature , vibration , pressure , speed , acceleration , load , torque , starts . You can of course change the IoT reading names and/or their values to fit your demo needs. First of all, make sure that in your Watson IoT Platform , Settings menu, the Activate Device Simulator is ON. Once that is done, you will see a little box in bottom-right of your screen showing 0 Simulation . Click on that 0 Simulation bottom-right box, and click Create Simulation . In the Select or create a device type box, select the CL_Asset device type you earlier created. That will open a window as you can see kit in picture below - let's customize this. In Event type name , enter CLA . in the Schedule field, enter 4 Every Minute . In the Payload , copy-paste the following .json code. Make sure at this stage that the Store events in the data lake box remains unchecked ! Click Save . Click Use Registerd Device , enter CL_Asset in the Pick Device box, select CL_Asset_1 . Repeat for CL_Asset_2 and CL_Asset_3 . You should now start seeing Events flowing in the bottom Events box. Note that the values in the random(35,40) functions can be considered being the 'standard operating conditions' for the given IoT reading. Later on in the lab, we will change those value ranges for short periods of time (i.e. change the temperature ranges from random(35,40) to random(46,49) ) and show how Monitor's out-of-the-box anomaly functions can automatically spot these 'anomalies' which are deviations from the 'standard operating conditions'. { \"temperature\": random(35,40), \"vibration\": random(1,5), \"pressure\": random(20,25), \"speed\": random(15,20), \"acceleration\": random(8,10), \"load\": random(90,110), \"torque\": random(12,14), \"starts\": increment(1,1) } The below pictures shows the 6 previous steps. Great, you now have your 3 CL_Asset_1_2_3 Devices generating IoT readings 4 times every minute. Let's check those readings on a Dashboard. 3. Create Watson IoT Platform Dashboard Let's create a Dashboard so we can see the simulated IoT readings for 1 of our devices: CL_Asset_1 . This Dashboard will allow us to clearly visualise the anomalies earlier mentioned. Still in the Watson IoT Platform , click on the Boards menu. Click Create Board . Name the Board CL_Asset IoT Readings Dashobard . Click Next then Submit . Open the Board. Let's first create a small card which displays the 8 IoT Readings we simulated, getting updated every 15 seconds. Click Add New Card . Select All device properties then CL_Asset_1 , then Next then Submit . Let's now create a card which whos the flow of data. Click Add New Card . Click Line Chart , then select CL_Asset_1 . Click Connect data set . In the event field, select CLA (that is the name of the IoT Simulation we created earlier), then in the Property select temperature . Repeat this for a couple more properties, e.g. vibration and pressure . Click Next , select the XL size, click Next then Submit . Drag and drop the second card next to the first one. Play with the 5 minutes to 24 hours views. The below pictures summarise the previous steps and show what your Dashboard should like. 4. Create Physical & Logical Interfaces So far, we have only generated simulated IoT data. What Monitor uses for all its visualisations and calculations is the data from the data lake . Monitor's data lake is being populated through the use of Physical & Logical interfaces. Let's create those interfaces and populate that data lake ! First let's create the Physical Interface. Still in the Watson IoT Platform , go to the Device Types menu, search then select CL_Asset , then click on the Interface menu. Click Create Physical Interface . Leave the default name CL_Asset_PI , click Next . Click Create event type . Wait 15 seconds or click Use Last Event Cache and you will see the CLA (which corresponds to the IoT Simulation we earlier created) event appear. Click that event, click Add . Cick Done . This picture shows the previous steps and where you should be by now. Let's now create the Logical Interface. Click Create Logical Interface . Leave the default name CL_Asset_LI , click Next . Click Add Property , Select the temperature , click Save . Repeat this for the 7 other IoT readings. Make sure you tick the Allow Additional Properties ON, as that would allow you to add more readings in the future if you wish. Click Next , click no event notifications and change it to All events . Click Apply , then Done . Click Activate twice. This picture shows the previous steps and what your screen should finally look like after you created your Physical & Logical interfaces. 5. Take a break and let some magic happen ... Brilliant ! You have created all that is needed to start monitoring your own IoT data. In the next module, we will check that your data lake is now populated. But first take a break (count 15 minutes at least, but I recommend several hours as all the following reports will show more data), because: some background job needs to run to populate your data lake with your IoT data, via the logical interface you just created. it is good for the IoT Simulation to keep running a bit, so the visualisations that we will build in next module will show data for more than just 1 hour. Also, for Anomaly functions to detect anomalies, 'normal conditions' must first occur 2. Monitor IoT data 0. Objectives In this Module you will: TBC 1. Check your IoT data made it to the Monitor data lake Back to the Monitor interface, click Monitor Entities . If you see 3 in Number of Entities , it means that your data did make it to the data lake. Let's have a look around. Click on CL_Asset . Then click on CL_Asset_1 , then on its Metrics tab. Play with the 'slider' on e.g. acceleration - you can see your data now. Go back to the CL_Asset main page, and click the Data tab. See all your (raw) IoT Metrics & Dimensions. Note that at this stage it is normal to see only a couple points on the graph as we have only been generating data for so long ! Play with the top 'slider' here too. If you see this, so far so good ! 2. Create an Hourly Summary Dashboard Back to the CL_Asset main page, click New Summary . Enter Hourly as your Dashboard title , select Hourly Time grain , click all Dimensions . Click Next . Click all Dat Item , and for just 1 reading e.g. temperature , select all Methods i.e. max , min , mean , std etc. Click Configure Dashboard . Click Create . Note that it will take a couple minutes for your Hourly dashboard is ready, and you will note a Preparing icon during that time. Once it is ready, your dashboard should look like this (with possibly less data points depending on how fast you have been to get here and for how long data has been sent). Notice the hourly grain of the cards (vs. the shorter time grain that you just saw on the CL_Asset_1 Metrics tab). On the left side in Summary Controls , notice the so-called Dimensions that correspond to the Metadata we associated to the CL_Asset Device Type and 3 Devices when we created them in the Watson IoT Platform. Notice how you can change the 'time scope' of each card. Finally, also notice how the temperature card displays the max , min , mean etc that we defined via the Methods and how you can click on 1 or several of these. 3. Explore the Data Back to the CL_Asset main page, click on the Data tab. Observe that new Data Items have appeared, i.e. under the Metric (Calculated) section. Notice that for all the IoT Readings, a new reading_Hourly_mean calculated metric was created - this was automatically done when we crated the hourly dashboard in previous step. In the filer just below Data Item , start writing temp . This filters the data items displayed. Note that for the temperature reading, on top of the mean data item, temperature_Hourly_min , temperature_Hourly_max , temperature_Hourly_std etc were also created - that is because of the 8 Methods that we earlier selected for that data item when creating the dashboard. 4. Create new Data Items On top of those automatically generated calculated metric , it is of course possible to create a vast range of new calculated metric . In the following exercise, we will: (a - step 1 to 3) create an hourly count of the number of starts using the Count function, (b - step 4) use a simple PythonExpression function to create temperature readings in Fahrenheit vs. Celsius, (c - step 5 to 6) use the Entity Filter and Filter functions to retrieve data for only 1 of our Devices (vs. for all Devices of the CL_Asset Device Type). Let's go: On the Data tab, click the + icon, select the Count function, click Next . On the first screen, select starts as the data source, enter 1 (default value) in min_output . Click Next . Select Hourly in the Granularity , untick the Auto Schedule and enter 5 in Executing query and 2 in Calculating last fields. In the Output metric field, enter starts_Hourly_count . Click Create . NOTE : as always, naming convention is important. As the amount of your data items will grow, you want to use a consistent naming convention that will e.g. facilitate your data viewing capabilities by making filtering easy and straightforward. In this case, we named the starts hourly count using a naming similar to the one that was used to create the temperature hourly count ! You will now see the new data item appear in your Metrics (calculated) menu. Wait for 5 minutes for results to appear. On the Data tab, click the + icon, select the PythonExpression function, click Next . In the expression field, type this: df['temperature'] * 1.8 + 32 - note this is a very simple Python expression using pandas syntax, for more info, see: Built-in functions and Using Expressions . Name the Output metric field temperature_farhenheit . Set the Schedule as we did in step 3., wait 5 minutes. Watch the newly created temperature_farhenheit data item. This is a 2-steps process. Firstly, on the Data tab, click the + icon, select the EntityFilter function, click Next . In the entity_list section, enter CL_Asset_1 . Click Next , name the Output metric field CL_Asset_1 . Set the Schedule as we did in step 3., wait 5 minutes. In Metrics (calculated) , search for then watch CL_Asset_1 . Secondly, we will use this filter and apply it to the temperature IoT reading. On the Data tab, click the + icon, select the Filter function, click Next . In the sources section, select the just created CL_Asset_1 data item. In the expression field, type ${CL_Asset_1} == True . In the filtered_sources field, select temperature . Click Next . Set the Schedule as we did in step 3. Name the Output metric field temperature_CL_Asset_1 . Wait 5 minutes. Watch the newly created data item which now displays the temperature values for CL_Asset_1 only ! 5. Create some anomalous IoT Readings Remember 2. Create IoT Simulation ? In that IoT simulation (which should have been running for some time now), we defined random ranges of values for each IoT reading, e.g. \"temperature\": random(35,40) . In this section, we are going to change that range during a couple minutes to simulate a sudden and temporary surge in temperature . That will enable us to demonstrate in 7. Create Anomaly Detection functions on your IoT data section that Monitor's out-of-the-box Anomaly Detection functions do actually spot that anomalous 'spike in temperature'. Back to the Watson IoT Platform , click the IoT Simulation box in bottom-right corner. Change the values of \"temperature\": random(35,40) line to \"temperature\": random(46,48) , click Save . Take note of the time on your watch. Let the updated simulation run for 3 to 4 minutes. After 3 to 4 minutes, set the \"temperature\": random(46,48) back to \"temperature\": random(35,40) , CLICK Save . the 'anomaly' we just created is visible on the Dashboard ( 10 minutes, 1 hour, 6 hours, 12 hours views), , i.e. we clearly see a temporary surge in the temperature readings in the top-right of the screen. NOTE : take note of the date and time when you generated those anomalous IoT readings, as we will see in further sections how Monitor 's Anomaly models pick these anomalous readings up. As you can see in below picture, the anomalous readings for these labs were created on November 2020, around 04:50 PM. 6. [OPTIONAL] Understand Monitor's Anomaly Detection capabilities Although this section is optional, it is highly recommended. This is a full Lab on itself, and plan 2 to 3 hours to complete it. You can access it here: Monitor Anomalies . In this great deep-dive lab, you will: View 3 great short Youtube movies explaining all the ins and outs of Anomaly Detection. Create simulated Robots that Monitor enables you to easily create and that come with all the required data needed to understand and play with Anomaly Detection. Understand the distinction between Summary & Instance dashboards and create both. Understand how to create Metric Line Cards and display Anomaly Detections on them. Create and display Alerts and display them ... and so much more ! 7. Create Anomaly Detection functions on your IoT data In this section, we are going to create 5 Anomaly models and see if they detect the temperature anomalous IoT readings we generated in 5. Create some anomalous IoT Readings section. On the Data tab, click the + icon, enter Anomaly in the Search box and have a look at all out Monitor 's available models. Click the FFTbasedGeneralizedAnomalyScore one. Click Next . Select the Apply to all entities of the selected type scope. Click Next . Select the temperature as input item and leave the default windowsize to 12 . Click Next . Set the Schedule as in previous section, and name the Output metric field temperature_anomaly_fft . Wait 5 minutes, and now watch the temperature_anomaly_fft graph. Do notice how a sudden peak of the anomaly score is observed on the 04:00 PM line ... remember 04:50 PM on November 2020 ! This confirms that this FFT model did perfectly pick up the anomalous temperature IoT readings we generated. Repeat steps 5 to 6 (keep all the defaluts) for the following anomaly detection functions: GeneralizedAnomalyScore , KMeansAnomalyScore , SaliencybasedGeneralizedAnomalyScore , SpectralAnomalyScore . Respecting the naming conventions, name your associated data items temperature_anomaly_generalized , temperature_anomaly_kmeans , temperature_anomaly_saliency , temperature_anomaly_spectral respectively. Open the corresponding Metric (calculated) data item and notice how all 5 Anomaly functions perfectly spotted the November 2020, 04:50 PM anomalies, i.e. display a sudden peak in their score at that time ! NOTE : the anomalies we earlier generated are very obvious - on purpose for this demo -, i.e. during just a couple minutes (around 04:50 PM), we generated temperature readings ranging from 46 to 48, whereas our IoT Simulation generated readings ranging from 35 to 40 for most of the time. No surprise then that all the 5 Anomaly models that we created spotted those obvious anomalies. However, be aware that those Monitor 's out-of-the-box anomaly models can detect much more than those obvious anomalies ! You can find more information on those models here: Unsupervised anomaly detectors and Supervised anomaly detectors . This picture gives a very quick overview of the main types of anomalies that Monitor can detect and which models are available. 8. Create Alerts based on Anomaly scores As you just learned, Monitor 's Anomaly Detection functions can easily spot anomalies and be viewed on a graph where the X-axis is Time and the Y-axis is an Anomaly Score . Each function returns a different score range (that is inherent to each model essence). What we are typically interested in our 'Anomaly Detection' work is to spot peaks in those scores, which correspond to the most likely anomalous readings we want to be alerted of. This is where Monitor's Alerts come into play. Alerts can be automatically generated in Monitor when one (any) of the Metrics of Monitor go above or below a certain value. In this exercise, we will generate Alerts based on the temperature_anomaly_* metrics we created in the previous section. The whole idea is that we want to be alerted when a serious anomaly occurs, but we do NOT want to be over alerted and drown in a so-called 'alert storm'. Also, what we want to avoid is generating way too many alerts into the system which would just 'pollute the database' with thousands of irrelevant and meaningless rows ! Because Anomaly Scores are something very dynamic, it is key that we look at those score values first before creating alerts based on them. So first of all, let's have a detailed look at your anomaly scores. Let's focus just on temperature_anomaly_generalized , temperature_anomaly_kmeans and temperature_anomaly_fft in this exercise. Although your scores might be slightly different, what you should note is that, whereas the (max values of the) anomaly scores remained consistently low most of the time that our IoT Simulation was running (i.e. \"temperature\": random(35,40) ), we can observe a clear spike for each of those scores corresponding to the November 20, 04:50 PM surge (i.e. \"temperature\": random(46,48) ). The picture and table below give an idea of those scores. This should give us a good-enough idea of where to start with our alerts ... Anomaly Data Item Normal Condition Score Anomalous Condition Score temperature_anomaly_generalized <<0.200 >1.5 temperature_anomaly_kmeans <<10 >30 temperature_anomaly_fft <<100 >450 On the Data tab, click the + icon, select AlertHighValue . Select temperature_alert_kmeans as input_item , enter 30 as the upper_threshold , select Medium in Severity and New in Status . Click Next , set the Schedule and name Repeat above step for temperature_alert_generalized ( upper_threshold = 1.5 , Severity = High , Status = Validated ), and temperature_alert_fft ( upper_threshold = 450 , Severity = Low , Status = Acknowledged ). Let's now have a look at the number of Alerts we generated. First notice that the newly created Alerts appear as another data item in the Alert (calculated) section. Click on e.g. temperature_alert_kmeans . NOTE: it might be that you see nothing on the graph and on the table under it, e.g. that might be the case if your IoT reading anomalies were generated yesterday. That is normal, because the default time range of those graphs are 1 day. On the table below the graph, click Last Week (vs. the default). See that for temperature_alert_kmeans , 4 Alerts were generated. Under the column Entity ID , click CL_Asset_1 , this will open a new window. Click Events , click Last Week (vs. the default), and you will see that we generated about 9 Alerts for CL_Asset_1 - that is a reasonable number, we are not going to overflow the system ! 9. Use Monitor API to change Dimensions and load a Picture In the next section, we'll explain how to update and customize the standard Dashboard that we created in . Prior to that, we are going to use Monitor's API to: (a)change the CL_Asset_1_2_3 Metadata values in the Watson IoT platform so we can later see how Dashboards can be 'filtered' on those metadata values (called Dimensions on Monitor side), (b) add an image and tie it to the CL_Asset Entity Type so we can display it on the dashboard. We will be using Postman to do this. In Monitor 's left menu, click the Services menu. On the Watson IoT Platform Service row, click View Details then View More . Next to the API Key , click Copy to clipboard - paste this is to your favourite notepad for future retrieval. Next to the API Token , click Copy to clipboard - paste this is to your favourite notepad for future retrieval. In Postman, click Create New Request . In Select a collection or folder to save to , click Create Collection , name it APM Labs . Name your Request POST Dimensions to CL_Asset_1 . Click Save to APM Labs . Open the Request, and change its (default) Type from GET to POST . On the Authorization tab, leave the default Type to inherit auth from parent . Next to the POST field, enter this value: https://api-{{geo_country_code}}.connectedproducts.internetofthings.ibmcloud.com/api/images/v1/{{tenantID}}/entityType/CL_Asset/dimensional where you will first need to: (a) replace {{geo_country_code}} with your specific country code (your country code is in the beginning of your Monitor Dashboard URL: https://dashboard-{{geo_country_code}} ), i.e. to either us , uk , de , or beta (b) replace {{tenantID}} with your Monitor Tenant ID which you can find in the top right corner of your Monitor webpage underneath your IBMiD. An example of that string (which is the one used for these Labs) can be found below. On the Headers tab, in the Key and Value columns, enter the following 3 rows (a) Key = Content-Type and Value = application/json , (b) Key = x-api-key and Value = Write the 'API Key' you fetched in step 1. , (c) Key = x-api-token and Value = Write the 'Authentication Token' you fetched in step 1. , On the Body tab, click the raw tick-box and enter the below .json snippet. Click Send . You should get a returned result as per picture below. Repeat steps 2. to 6. for (a) CL_Asset_2 where you enter for the descriptiveLocation : \"value\" : \"Melbourne\" and for model : Model_B , (b) CL_Asset_2 where you enter for the descriptiveLocation : \"value\" : \"Sydney\" and for model : Model_B . Example of the string to be used in Postman 'POST Dimensions to CL_Asset_1' call: https://api-us.connectedproducts.internetofthings.ibmcloud.com/api/master/v1/CTP-PMI-Democore-2/entity/type/CL_Asset/dimensional [ { \"id\": \"CL_Asset_1\", \"name\" : \"descriptiveLocation\", \"type\" : \"LITERAL\", \"value\" : \"Perth\" }, { \"id\": \"CL_Asset_1\", \"name\" : \"model\", \"type\" : \"LITERAL\", \"value\" : \"Model_A\" } ] Let's now check that our changes worked ! There are several ways we can do that: Go to the Monitor left menu. Search for and open CL_Asset . Watch the updated values for descriptiveLocation and model fields for the 3 Assets. Go to the Data tab, in the Dimensions section, select Model then descriptiveLocation and watch ! We are now going to use another API call to upload a picture to the system. This picture will be used in the final 10. Update your Summary Dashboard . Create a new POST Image to CL_Asset EntityType Request in Postman, make it of POST type. Next to the POST field, enter this value: https://api-{{geo_country_code}}.connectedproducts.internetofthings.ibmcloud.com/api/images/v1/{{tenantID}}/entityType/CL_Asset after having replaced {{geo_country_code}} and {{tenantID}} with your values (see below for the sample string used for this lab). On the Authorization tab, leave the default Type to inherit auth from parent . On the Headers tab, in the Key and Value columns, enter the 2 rows x-api-key and x-api-token as you did previously (no need for the Content-Type / application/json row here). Download this image Image and save it as CL_Asset.jpg on your computer. On the Body tab, select the form-data tick-box. Enter enter the following 3 rows: (a) Key = imagefilecontent , select File on the right of the box. That will populate the Value column with a Choose Files button. Click it and select your CL_Asset.jpg . (b) Key = imageid and Value = CL_Asset (c) Key = tags and Value = CL_Asset . Click Send , observe the returned \"message\": \"success\" body. Example of the string to be used in Postman 'POST Image to CL_Asset EntityType' call: https://api-us.connectedproducts.internetofthings.ibmcloud.com/api/images/v1/CTP-PMI-Democore-2/entityType/CL_Asset 10. Update your Summary Dashboard [Note that in a future release of Monitor, Dashboard creation and editing will be do-able directly via Monitor's user interface. However, this section will remain relevant to understand how dashboards are structured] In this final 'Monitor Lab' section, we are going to bring everything together and show how you can create and customise dashboards to - literally - visualise whatever you want from all the data we generated so far. Remember 2. Create an Hourly Summary Dashboard section ? We then created the simplest, out-of-the-box, Hourly dashboard. In this section, we will (a) understand the .json file structure and card elements that make up dashboards, (b) create a simple custom dashboard, (c) create an advanced dashboard using most of the cards possibilities. Note that this will imply .json file editing and we therefore recommend a cool json editing tool that should at least provide the ability to collapse .json file levels for better visibility and easier navigation - we used the free version of BBEdit here. Open the CL_Asset Hourly dashboard. Top-right, click Edit Dashboard , then Export . Your browser will automatically download a .json file called Hourly-dashboard.json . For your reference, you can also find that original .json here: Hourly-dashboard-ORIGINAL.json . Let's have a look at the main elements of that .json file. In your .json editor, Collapse Folds below Level 2 . This shows the main elements of the file, i.e. : timeGrain , cards , title , layouts . In your .json editor, Collapse Folds below Level 3 . Note that you have 9 cards - one for each of the graphs you see on the dashboard. Note that each card has several sub-sections, including id (must be unique), dataSource (this where you define what data item(s) you want to display on the card), content (this is where you define the labels of your card), size , title and type (note all cards are presently of type TIMESERIES , we'll soon see other types). In your .json editor, Collapse Folds below Level 4 . Let's focus on the most complex card, i.e. the one displaying temperature IoT readings for which we earlier defined mean , max , min , std , count , sum data items. In the dataSource section, note (a) the attributes sub-sections (1 for each above data item), (b) the range section where we define the default count and interval of the card, (c) the timeGrain . In the content section, we define the labels of the card - note that each attribute defined in the attributes section MUST have a corresponding dataSourceID in the content-series . OK, that should be enough to understand at a high-level how dashboards work. Go through this Dashboard JSON Reference documentation to see all that can be done with dashboards, i.e. what types of cards you can add (value card, table card, bar chart card, image card etc), how to change the layout etc. This Tutorial (which will show you how to customize a dashboard) is just 1 out of 7 tutorials which will help you master dashboarding. As a final exercise, let's now create an advanced dashboard which will incorporate most of the card types (i.e. BAR , TIMESERIES , ALERT , IMAGE , VALUE ) and dashboarding capabilities. Open the CL_Asset Hourly dashboard. Top-right, click Edit dashboard . Save this Hourly-dashboard-CUSTOM.json file to your computer. Click Import , select the just-saved Hourly-dashboard-CUSTOM.json . You now have a preview of what your new dashboard will look like. The json provided will work if you followed the naming conventions throughout the labs, as all dataSourceId (like e.g. temperature , pressure_Hourly_mean etc) are pretty straightforward and did not involve your initials. Note that if you have any error while saving, check the error message which is usually helpful by providing you with a specific problematic data item name which you should then search within the .json. Likely causes of errors you might encounter will be related to how you named data items - e.g. if you named the picture XY_Asset.jpg instead of CL_Asset.jpg . This picture shows what your final dashboard should look like. And this final picture shows which .json snippet corresponds to each of the card - have a detailed look at everything, and you are strongly encouraged to try new stuff ... Congratulations, you made it - hope you enjoyed this lab ! P.S.: Have you found the GOLDEN NUGGET yet ?","title":"MONITOR"},{"location":"monitor/monitor/#monitor-lab","text":"Before you begin:","title":"MONITOR Lab"},{"location":"monitor/monitor/#0-objectives","text":"In this Module you will: Create a Device Type and 3 Devices of that Type Generate IoT data for those 3 Devices using an IoT simulation Create Physical & Logical interfaces to send the IoT data to the Monitor data lake Visualise the IoT data in a Watson IoT Platform simple dashboard","title":"0. Objectives"},{"location":"monitor/monitor/#1-generate-iot-data","text":"","title":"1. Generate IoT data"},{"location":"monitor/monitor/#1-create-device-type-3-devices","text":"Let's first create a Device Type . From your Monitor Instance Home page, click Connect Devices On the opened Connect menu, click Open Platform Service application in the top-right corner. This will launch the associated Watson IoT Platform in a separate browser tab. Go to the Device Types menu, and click Add Device Type . Enter XY_Asset in the Name and Description fields - where XY are your initials. Note that for the rest of this lab, we will use CL_Asset (e.g. CL for Christophe Lucas). Click Next . On the next Metadata page, enter CL in Model and Manufacturer fields, and enter CL_Asset in Device Class field. The reason why we want to enter values here is to later show how Dimensions can be used in Monitor to slide and dice the data. Click Finish . The below picture shows the 5 previous steps. Now, let's create 3 Devices of type CL_Asset . Stay in the Watson IoT Platform , go to the Browse menu and click Add Device . On the identity page, select your just created CL_Asset as Entity Type and enter CL_Asset_1 in Device ID . Click Next . On the Device Information page, accept the defaults, click Next . On the Security page, accept the defaults, click Next . On the Security page, accept the defaults, click Next . Click Back , and repeat above steps 1 to 5 for 2 more Assets: CL_Asset_2 and CL_Asset_3 . Finally, go to the Browse menu, enter CL_Asset in the Search field, and you will now see your 3 Devices. You have now created the required CL_Asset Device Type and the 3 CL_Asset_1 , CL_Asset_2 and CL_Asset_3 Devices that we will use throughout the labs. The below pictures shows the 7 previous steps.","title":"1. Create Device Type &amp; 3 Devices"},{"location":"monitor/monitor/#2-create-iot-simulation","text":"Let's now send data to those 3 Devices ! Using the Watson IoT Platform IoT Simulation capabilities, it is possible to simulate a device and its IoT readings - exactly as if this was a real IoT device really connected to the platform and sending real IoT readings. We are going to use this great functionality as it allows one to literally simulate any asset (e.g. Pump, Engine, Truck, Conveyor Belt - you name it !), any IoT readings and do any demo. For this Lab, we will simulate our 3 CL_Asset_1_2_3 Devices generating the following IoT readings: temperature , vibration , pressure , speed , acceleration , load , torque , starts . You can of course change the IoT reading names and/or their values to fit your demo needs. First of all, make sure that in your Watson IoT Platform , Settings menu, the Activate Device Simulator is ON. Once that is done, you will see a little box in bottom-right of your screen showing 0 Simulation . Click on that 0 Simulation bottom-right box, and click Create Simulation . In the Select or create a device type box, select the CL_Asset device type you earlier created. That will open a window as you can see kit in picture below - let's customize this. In Event type name , enter CLA . in the Schedule field, enter 4 Every Minute . In the Payload , copy-paste the following .json code. Make sure at this stage that the Store events in the data lake box remains unchecked ! Click Save . Click Use Registerd Device , enter CL_Asset in the Pick Device box, select CL_Asset_1 . Repeat for CL_Asset_2 and CL_Asset_3 . You should now start seeing Events flowing in the bottom Events box. Note that the values in the random(35,40) functions can be considered being the 'standard operating conditions' for the given IoT reading. Later on in the lab, we will change those value ranges for short periods of time (i.e. change the temperature ranges from random(35,40) to random(46,49) ) and show how Monitor's out-of-the-box anomaly functions can automatically spot these 'anomalies' which are deviations from the 'standard operating conditions'. { \"temperature\": random(35,40), \"vibration\": random(1,5), \"pressure\": random(20,25), \"speed\": random(15,20), \"acceleration\": random(8,10), \"load\": random(90,110), \"torque\": random(12,14), \"starts\": increment(1,1) } The below pictures shows the 6 previous steps. Great, you now have your 3 CL_Asset_1_2_3 Devices generating IoT readings 4 times every minute. Let's check those readings on a Dashboard.","title":"2. Create IoT Simulation"},{"location":"monitor/monitor/#3-create-watson-iot-platform-dashboard","text":"Let's create a Dashboard so we can see the simulated IoT readings for 1 of our devices: CL_Asset_1 . This Dashboard will allow us to clearly visualise the anomalies earlier mentioned. Still in the Watson IoT Platform , click on the Boards menu. Click Create Board . Name the Board CL_Asset IoT Readings Dashobard . Click Next then Submit . Open the Board. Let's first create a small card which displays the 8 IoT Readings we simulated, getting updated every 15 seconds. Click Add New Card . Select All device properties then CL_Asset_1 , then Next then Submit . Let's now create a card which whos the flow of data. Click Add New Card . Click Line Chart , then select CL_Asset_1 . Click Connect data set . In the event field, select CLA (that is the name of the IoT Simulation we created earlier), then in the Property select temperature . Repeat this for a couple more properties, e.g. vibration and pressure . Click Next , select the XL size, click Next then Submit . Drag and drop the second card next to the first one. Play with the 5 minutes to 24 hours views. The below pictures summarise the previous steps and show what your Dashboard should like.","title":"3. Create Watson IoT Platform Dashboard"},{"location":"monitor/monitor/#4-create-physical-logical-interfaces","text":"So far, we have only generated simulated IoT data. What Monitor uses for all its visualisations and calculations is the data from the data lake . Monitor's data lake is being populated through the use of Physical & Logical interfaces. Let's create those interfaces and populate that data lake ! First let's create the Physical Interface. Still in the Watson IoT Platform , go to the Device Types menu, search then select CL_Asset , then click on the Interface menu. Click Create Physical Interface . Leave the default name CL_Asset_PI , click Next . Click Create event type . Wait 15 seconds or click Use Last Event Cache and you will see the CLA (which corresponds to the IoT Simulation we earlier created) event appear. Click that event, click Add . Cick Done . This picture shows the previous steps and where you should be by now. Let's now create the Logical Interface. Click Create Logical Interface . Leave the default name CL_Asset_LI , click Next . Click Add Property , Select the temperature , click Save . Repeat this for the 7 other IoT readings. Make sure you tick the Allow Additional Properties ON, as that would allow you to add more readings in the future if you wish. Click Next , click no event notifications and change it to All events . Click Apply , then Done . Click Activate twice. This picture shows the previous steps and what your screen should finally look like after you created your Physical & Logical interfaces.","title":"4. Create Physical &amp; Logical Interfaces"},{"location":"monitor/monitor/#5-take-a-break-and-let-some-magic-happen","text":"Brilliant ! You have created all that is needed to start monitoring your own IoT data. In the next module, we will check that your data lake is now populated. But first take a break (count 15 minutes at least, but I recommend several hours as all the following reports will show more data), because: some background job needs to run to populate your data lake with your IoT data, via the logical interface you just created. it is good for the IoT Simulation to keep running a bit, so the visualisations that we will build in next module will show data for more than just 1 hour. Also, for Anomaly functions to detect anomalies, 'normal conditions' must first occur","title":"5. Take a break and let some magic happen ..."},{"location":"monitor/monitor/#2-monitor-iot-data","text":"","title":"2. Monitor IoT data"},{"location":"monitor/monitor/#0-objectives_1","text":"In this Module you will: TBC","title":"0. Objectives"},{"location":"monitor/monitor/#1-check-your-iot-data-made-it-to-the-monitor-data-lake","text":"Back to the Monitor interface, click Monitor Entities . If you see 3 in Number of Entities , it means that your data did make it to the data lake. Let's have a look around. Click on CL_Asset . Then click on CL_Asset_1 , then on its Metrics tab. Play with the 'slider' on e.g. acceleration - you can see your data now. Go back to the CL_Asset main page, and click the Data tab. See all your (raw) IoT Metrics & Dimensions. Note that at this stage it is normal to see only a couple points on the graph as we have only been generating data for so long ! Play with the top 'slider' here too. If you see this, so far so good !","title":"1. Check your IoT data made it to the Monitor data lake"},{"location":"monitor/monitor/#2-create-an-hourly-summary-dashboard","text":"Back to the CL_Asset main page, click New Summary . Enter Hourly as your Dashboard title , select Hourly Time grain , click all Dimensions . Click Next . Click all Dat Item , and for just 1 reading e.g. temperature , select all Methods i.e. max , min , mean , std etc. Click Configure Dashboard . Click Create . Note that it will take a couple minutes for your Hourly dashboard is ready, and you will note a Preparing icon during that time. Once it is ready, your dashboard should look like this (with possibly less data points depending on how fast you have been to get here and for how long data has been sent). Notice the hourly grain of the cards (vs. the shorter time grain that you just saw on the CL_Asset_1 Metrics tab). On the left side in Summary Controls , notice the so-called Dimensions that correspond to the Metadata we associated to the CL_Asset Device Type and 3 Devices when we created them in the Watson IoT Platform. Notice how you can change the 'time scope' of each card. Finally, also notice how the temperature card displays the max , min , mean etc that we defined via the Methods and how you can click on 1 or several of these.","title":"2. Create an Hourly Summary Dashboard"},{"location":"monitor/monitor/#3-explore-the-data","text":"Back to the CL_Asset main page, click on the Data tab. Observe that new Data Items have appeared, i.e. under the Metric (Calculated) section. Notice that for all the IoT Readings, a new reading_Hourly_mean calculated metric was created - this was automatically done when we crated the hourly dashboard in previous step. In the filer just below Data Item , start writing temp . This filters the data items displayed. Note that for the temperature reading, on top of the mean data item, temperature_Hourly_min , temperature_Hourly_max , temperature_Hourly_std etc were also created - that is because of the 8 Methods that we earlier selected for that data item when creating the dashboard.","title":"3. Explore the Data"},{"location":"monitor/monitor/#4-create-new-data-items","text":"On top of those automatically generated calculated metric , it is of course possible to create a vast range of new calculated metric . In the following exercise, we will: (a - step 1 to 3) create an hourly count of the number of starts using the Count function, (b - step 4) use a simple PythonExpression function to create temperature readings in Fahrenheit vs. Celsius, (c - step 5 to 6) use the Entity Filter and Filter functions to retrieve data for only 1 of our Devices (vs. for all Devices of the CL_Asset Device Type). Let's go: On the Data tab, click the + icon, select the Count function, click Next . On the first screen, select starts as the data source, enter 1 (default value) in min_output . Click Next . Select Hourly in the Granularity , untick the Auto Schedule and enter 5 in Executing query and 2 in Calculating last fields. In the Output metric field, enter starts_Hourly_count . Click Create . NOTE : as always, naming convention is important. As the amount of your data items will grow, you want to use a consistent naming convention that will e.g. facilitate your data viewing capabilities by making filtering easy and straightforward. In this case, we named the starts hourly count using a naming similar to the one that was used to create the temperature hourly count ! You will now see the new data item appear in your Metrics (calculated) menu. Wait for 5 minutes for results to appear. On the Data tab, click the + icon, select the PythonExpression function, click Next . In the expression field, type this: df['temperature'] * 1.8 + 32 - note this is a very simple Python expression using pandas syntax, for more info, see: Built-in functions and Using Expressions . Name the Output metric field temperature_farhenheit . Set the Schedule as we did in step 3., wait 5 minutes. Watch the newly created temperature_farhenheit data item. This is a 2-steps process. Firstly, on the Data tab, click the + icon, select the EntityFilter function, click Next . In the entity_list section, enter CL_Asset_1 . Click Next , name the Output metric field CL_Asset_1 . Set the Schedule as we did in step 3., wait 5 minutes. In Metrics (calculated) , search for then watch CL_Asset_1 . Secondly, we will use this filter and apply it to the temperature IoT reading. On the Data tab, click the + icon, select the Filter function, click Next . In the sources section, select the just created CL_Asset_1 data item. In the expression field, type ${CL_Asset_1} == True . In the filtered_sources field, select temperature . Click Next . Set the Schedule as we did in step 3. Name the Output metric field temperature_CL_Asset_1 . Wait 5 minutes. Watch the newly created data item which now displays the temperature values for CL_Asset_1 only !","title":"4. Create new Data Items"},{"location":"monitor/monitor/#5-create-some-anomalous-iot-readings","text":"Remember 2. Create IoT Simulation ? In that IoT simulation (which should have been running for some time now), we defined random ranges of values for each IoT reading, e.g. \"temperature\": random(35,40) . In this section, we are going to change that range during a couple minutes to simulate a sudden and temporary surge in temperature . That will enable us to demonstrate in 7. Create Anomaly Detection functions on your IoT data section that Monitor's out-of-the-box Anomaly Detection functions do actually spot that anomalous 'spike in temperature'. Back to the Watson IoT Platform , click the IoT Simulation box in bottom-right corner. Change the values of \"temperature\": random(35,40) line to \"temperature\": random(46,48) , click Save . Take note of the time on your watch. Let the updated simulation run for 3 to 4 minutes. After 3 to 4 minutes, set the \"temperature\": random(46,48) back to \"temperature\": random(35,40) , CLICK Save . the 'anomaly' we just created is visible on the Dashboard ( 10 minutes, 1 hour, 6 hours, 12 hours views), , i.e. we clearly see a temporary surge in the temperature readings in the top-right of the screen. NOTE : take note of the date and time when you generated those anomalous IoT readings, as we will see in further sections how Monitor 's Anomaly models pick these anomalous readings up. As you can see in below picture, the anomalous readings for these labs were created on November 2020, around 04:50 PM.","title":"5. Create some anomalous IoT Readings"},{"location":"monitor/monitor/#6-optional-understand-monitors-anomaly-detection-capabilities","text":"Although this section is optional, it is highly recommended. This is a full Lab on itself, and plan 2 to 3 hours to complete it. You can access it here: Monitor Anomalies . In this great deep-dive lab, you will: View 3 great short Youtube movies explaining all the ins and outs of Anomaly Detection. Create simulated Robots that Monitor enables you to easily create and that come with all the required data needed to understand and play with Anomaly Detection. Understand the distinction between Summary & Instance dashboards and create both. Understand how to create Metric Line Cards and display Anomaly Detections on them. Create and display Alerts and display them ... and so much more !","title":"6. [OPTIONAL] Understand Monitor's Anomaly Detection capabilities"},{"location":"monitor/monitor/#7-create-anomaly-detection-functions-on-your-iot-data","text":"In this section, we are going to create 5 Anomaly models and see if they detect the temperature anomalous IoT readings we generated in 5. Create some anomalous IoT Readings section. On the Data tab, click the + icon, enter Anomaly in the Search box and have a look at all out Monitor 's available models. Click the FFTbasedGeneralizedAnomalyScore one. Click Next . Select the Apply to all entities of the selected type scope. Click Next . Select the temperature as input item and leave the default windowsize to 12 . Click Next . Set the Schedule as in previous section, and name the Output metric field temperature_anomaly_fft . Wait 5 minutes, and now watch the temperature_anomaly_fft graph. Do notice how a sudden peak of the anomaly score is observed on the 04:00 PM line ... remember 04:50 PM on November 2020 ! This confirms that this FFT model did perfectly pick up the anomalous temperature IoT readings we generated. Repeat steps 5 to 6 (keep all the defaluts) for the following anomaly detection functions: GeneralizedAnomalyScore , KMeansAnomalyScore , SaliencybasedGeneralizedAnomalyScore , SpectralAnomalyScore . Respecting the naming conventions, name your associated data items temperature_anomaly_generalized , temperature_anomaly_kmeans , temperature_anomaly_saliency , temperature_anomaly_spectral respectively. Open the corresponding Metric (calculated) data item and notice how all 5 Anomaly functions perfectly spotted the November 2020, 04:50 PM anomalies, i.e. display a sudden peak in their score at that time ! NOTE : the anomalies we earlier generated are very obvious - on purpose for this demo -, i.e. during just a couple minutes (around 04:50 PM), we generated temperature readings ranging from 46 to 48, whereas our IoT Simulation generated readings ranging from 35 to 40 for most of the time. No surprise then that all the 5 Anomaly models that we created spotted those obvious anomalies. However, be aware that those Monitor 's out-of-the-box anomaly models can detect much more than those obvious anomalies ! You can find more information on those models here: Unsupervised anomaly detectors and Supervised anomaly detectors . This picture gives a very quick overview of the main types of anomalies that Monitor can detect and which models are available.","title":"7. Create Anomaly Detection functions on your IoT data"},{"location":"monitor/monitor/#8-create-alerts-based-on-anomaly-scores","text":"As you just learned, Monitor 's Anomaly Detection functions can easily spot anomalies and be viewed on a graph where the X-axis is Time and the Y-axis is an Anomaly Score . Each function returns a different score range (that is inherent to each model essence). What we are typically interested in our 'Anomaly Detection' work is to spot peaks in those scores, which correspond to the most likely anomalous readings we want to be alerted of. This is where Monitor's Alerts come into play. Alerts can be automatically generated in Monitor when one (any) of the Metrics of Monitor go above or below a certain value. In this exercise, we will generate Alerts based on the temperature_anomaly_* metrics we created in the previous section. The whole idea is that we want to be alerted when a serious anomaly occurs, but we do NOT want to be over alerted and drown in a so-called 'alert storm'. Also, what we want to avoid is generating way too many alerts into the system which would just 'pollute the database' with thousands of irrelevant and meaningless rows ! Because Anomaly Scores are something very dynamic, it is key that we look at those score values first before creating alerts based on them. So first of all, let's have a detailed look at your anomaly scores. Let's focus just on temperature_anomaly_generalized , temperature_anomaly_kmeans and temperature_anomaly_fft in this exercise. Although your scores might be slightly different, what you should note is that, whereas the (max values of the) anomaly scores remained consistently low most of the time that our IoT Simulation was running (i.e. \"temperature\": random(35,40) ), we can observe a clear spike for each of those scores corresponding to the November 20, 04:50 PM surge (i.e. \"temperature\": random(46,48) ). The picture and table below give an idea of those scores. This should give us a good-enough idea of where to start with our alerts ... Anomaly Data Item Normal Condition Score Anomalous Condition Score temperature_anomaly_generalized <<0.200 >1.5 temperature_anomaly_kmeans <<10 >30 temperature_anomaly_fft <<100 >450 On the Data tab, click the + icon, select AlertHighValue . Select temperature_alert_kmeans as input_item , enter 30 as the upper_threshold , select Medium in Severity and New in Status . Click Next , set the Schedule and name Repeat above step for temperature_alert_generalized ( upper_threshold = 1.5 , Severity = High , Status = Validated ), and temperature_alert_fft ( upper_threshold = 450 , Severity = Low , Status = Acknowledged ). Let's now have a look at the number of Alerts we generated. First notice that the newly created Alerts appear as another data item in the Alert (calculated) section. Click on e.g. temperature_alert_kmeans . NOTE: it might be that you see nothing on the graph and on the table under it, e.g. that might be the case if your IoT reading anomalies were generated yesterday. That is normal, because the default time range of those graphs are 1 day. On the table below the graph, click Last Week (vs. the default). See that for temperature_alert_kmeans , 4 Alerts were generated. Under the column Entity ID , click CL_Asset_1 , this will open a new window. Click Events , click Last Week (vs. the default), and you will see that we generated about 9 Alerts for CL_Asset_1 - that is a reasonable number, we are not going to overflow the system !","title":"8. Create Alerts based on Anomaly scores"},{"location":"monitor/monitor/#9-use-monitor-api-to-change-dimensions-and-load-a-picture","text":"In the next section, we'll explain how to update and customize the standard Dashboard that we created in . Prior to that, we are going to use Monitor's API to: (a)change the CL_Asset_1_2_3 Metadata values in the Watson IoT platform so we can later see how Dashboards can be 'filtered' on those metadata values (called Dimensions on Monitor side), (b) add an image and tie it to the CL_Asset Entity Type so we can display it on the dashboard. We will be using Postman to do this. In Monitor 's left menu, click the Services menu. On the Watson IoT Platform Service row, click View Details then View More . Next to the API Key , click Copy to clipboard - paste this is to your favourite notepad for future retrieval. Next to the API Token , click Copy to clipboard - paste this is to your favourite notepad for future retrieval. In Postman, click Create New Request . In Select a collection or folder to save to , click Create Collection , name it APM Labs . Name your Request POST Dimensions to CL_Asset_1 . Click Save to APM Labs . Open the Request, and change its (default) Type from GET to POST . On the Authorization tab, leave the default Type to inherit auth from parent . Next to the POST field, enter this value: https://api-{{geo_country_code}}.connectedproducts.internetofthings.ibmcloud.com/api/images/v1/{{tenantID}}/entityType/CL_Asset/dimensional where you will first need to: (a) replace {{geo_country_code}} with your specific country code (your country code is in the beginning of your Monitor Dashboard URL: https://dashboard-{{geo_country_code}} ), i.e. to either us , uk , de , or beta (b) replace {{tenantID}} with your Monitor Tenant ID which you can find in the top right corner of your Monitor webpage underneath your IBMiD. An example of that string (which is the one used for these Labs) can be found below. On the Headers tab, in the Key and Value columns, enter the following 3 rows (a) Key = Content-Type and Value = application/json , (b) Key = x-api-key and Value = Write the 'API Key' you fetched in step 1. , (c) Key = x-api-token and Value = Write the 'Authentication Token' you fetched in step 1. , On the Body tab, click the raw tick-box and enter the below .json snippet. Click Send . You should get a returned result as per picture below. Repeat steps 2. to 6. for (a) CL_Asset_2 where you enter for the descriptiveLocation : \"value\" : \"Melbourne\" and for model : Model_B , (b) CL_Asset_2 where you enter for the descriptiveLocation : \"value\" : \"Sydney\" and for model : Model_B . Example of the string to be used in Postman 'POST Dimensions to CL_Asset_1' call: https://api-us.connectedproducts.internetofthings.ibmcloud.com/api/master/v1/CTP-PMI-Democore-2/entity/type/CL_Asset/dimensional [ { \"id\": \"CL_Asset_1\", \"name\" : \"descriptiveLocation\", \"type\" : \"LITERAL\", \"value\" : \"Perth\" }, { \"id\": \"CL_Asset_1\", \"name\" : \"model\", \"type\" : \"LITERAL\", \"value\" : \"Model_A\" } ] Let's now check that our changes worked ! There are several ways we can do that: Go to the Monitor left menu. Search for and open CL_Asset . Watch the updated values for descriptiveLocation and model fields for the 3 Assets. Go to the Data tab, in the Dimensions section, select Model then descriptiveLocation and watch ! We are now going to use another API call to upload a picture to the system. This picture will be used in the final 10. Update your Summary Dashboard . Create a new POST Image to CL_Asset EntityType Request in Postman, make it of POST type. Next to the POST field, enter this value: https://api-{{geo_country_code}}.connectedproducts.internetofthings.ibmcloud.com/api/images/v1/{{tenantID}}/entityType/CL_Asset after having replaced {{geo_country_code}} and {{tenantID}} with your values (see below for the sample string used for this lab). On the Authorization tab, leave the default Type to inherit auth from parent . On the Headers tab, in the Key and Value columns, enter the 2 rows x-api-key and x-api-token as you did previously (no need for the Content-Type / application/json row here). Download this image Image and save it as CL_Asset.jpg on your computer. On the Body tab, select the form-data tick-box. Enter enter the following 3 rows: (a) Key = imagefilecontent , select File on the right of the box. That will populate the Value column with a Choose Files button. Click it and select your CL_Asset.jpg . (b) Key = imageid and Value = CL_Asset (c) Key = tags and Value = CL_Asset . Click Send , observe the returned \"message\": \"success\" body. Example of the string to be used in Postman 'POST Image to CL_Asset EntityType' call: https://api-us.connectedproducts.internetofthings.ibmcloud.com/api/images/v1/CTP-PMI-Democore-2/entityType/CL_Asset","title":"9. Use Monitor API to change Dimensions and load a Picture"},{"location":"monitor/monitor/#10-update-your-summary-dashboard","text":"[Note that in a future release of Monitor, Dashboard creation and editing will be do-able directly via Monitor's user interface. However, this section will remain relevant to understand how dashboards are structured] In this final 'Monitor Lab' section, we are going to bring everything together and show how you can create and customise dashboards to - literally - visualise whatever you want from all the data we generated so far. Remember 2. Create an Hourly Summary Dashboard section ? We then created the simplest, out-of-the-box, Hourly dashboard. In this section, we will (a) understand the .json file structure and card elements that make up dashboards, (b) create a simple custom dashboard, (c) create an advanced dashboard using most of the cards possibilities. Note that this will imply .json file editing and we therefore recommend a cool json editing tool that should at least provide the ability to collapse .json file levels for better visibility and easier navigation - we used the free version of BBEdit here. Open the CL_Asset Hourly dashboard. Top-right, click Edit Dashboard , then Export . Your browser will automatically download a .json file called Hourly-dashboard.json . For your reference, you can also find that original .json here: Hourly-dashboard-ORIGINAL.json . Let's have a look at the main elements of that .json file. In your .json editor, Collapse Folds below Level 2 . This shows the main elements of the file, i.e. : timeGrain , cards , title , layouts . In your .json editor, Collapse Folds below Level 3 . Note that you have 9 cards - one for each of the graphs you see on the dashboard. Note that each card has several sub-sections, including id (must be unique), dataSource (this where you define what data item(s) you want to display on the card), content (this is where you define the labels of your card), size , title and type (note all cards are presently of type TIMESERIES , we'll soon see other types). In your .json editor, Collapse Folds below Level 4 . Let's focus on the most complex card, i.e. the one displaying temperature IoT readings for which we earlier defined mean , max , min , std , count , sum data items. In the dataSource section, note (a) the attributes sub-sections (1 for each above data item), (b) the range section where we define the default count and interval of the card, (c) the timeGrain . In the content section, we define the labels of the card - note that each attribute defined in the attributes section MUST have a corresponding dataSourceID in the content-series . OK, that should be enough to understand at a high-level how dashboards work. Go through this Dashboard JSON Reference documentation to see all that can be done with dashboards, i.e. what types of cards you can add (value card, table card, bar chart card, image card etc), how to change the layout etc. This Tutorial (which will show you how to customize a dashboard) is just 1 out of 7 tutorials which will help you master dashboarding. As a final exercise, let's now create an advanced dashboard which will incorporate most of the card types (i.e. BAR , TIMESERIES , ALERT , IMAGE , VALUE ) and dashboarding capabilities. Open the CL_Asset Hourly dashboard. Top-right, click Edit dashboard . Save this Hourly-dashboard-CUSTOM.json file to your computer. Click Import , select the just-saved Hourly-dashboard-CUSTOM.json . You now have a preview of what your new dashboard will look like. The json provided will work if you followed the naming conventions throughout the labs, as all dataSourceId (like e.g. temperature , pressure_Hourly_mean etc) are pretty straightforward and did not involve your initials. Note that if you have any error while saving, check the error message which is usually helpful by providing you with a specific problematic data item name which you should then search within the .json. Likely causes of errors you might encounter will be related to how you named data items - e.g. if you named the picture XY_Asset.jpg instead of CL_Asset.jpg . This picture shows what your final dashboard should look like. And this final picture shows which .json snippet corresponds to each of the card - have a detailed look at everything, and you are strongly encouraged to try new stuff ... Congratulations, you made it - hope you enjoyed this lab ! P.S.: Have you found the GOLDEN NUGGET yet ?","title":"10. Update your Summary Dashboard"},{"location":"predict/predict/","text":"About the Author & Your Feedback Christophe Lucas is a fan of Miles Davis who loves playing with words, images and micro structural sounds. As a pass-time, some times, he likes to rewrite the history of the hellenistic world, and some other times, just for a change, he creates APM lab material like the one you just bravely went through. You can contact Christophe to provide feedback and/or report any issue with this material via LinkedIn here .","title":"PREDICT"},{"location":"predict/predict/#about-the-author-your-feedback","text":"Christophe Lucas is a fan of Miles Davis who loves playing with words, images and micro structural sounds. As a pass-time, some times, he likes to rewrite the history of the hellenistic world, and some other times, just for a change, he creates APM lab material like the one you just bravely went through. You can contact Christophe to provide feedback and/or report any issue with this material via LinkedIn here .","title":"About the Author &amp; Your Feedback"}]}